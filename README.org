#+TITLE: Cool Emacs config.
#+AUTHOR: Scriptod
#+STARTUP: overview

* Package Management
** Package archives
Repositories of Emacs-lisp packages.

#+BEGIN_SRC emacs-lisp
(defvar gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")

(require 'package)

(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")))
#+END_SRC
** Straight
A purely functional package manager for an Emacs hacker.

#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC
** Use-package
Bootstrapping use-package - A cool macro that can both speed-up and make tidier your config. 

#+BEGIN_SRC emacs-lisp
(straight-use-package 'use-package)
#+END_SRC
** Try
Try is a tool for trying packages in Emacs without installing them permanently.

#+BEGIN_SRC emacs-lisp
(use-package try
  :straight t)
#+END_SRC

* Startup
** Start the server
If you don't use Emacs in a server mode then you definitely doing something wrong.

#+BEGIN_SRC emacs-lisp
(server-start)
#+END_SRC
* Libraries
** Dash
A modern list library for Emacs.

#+BEGIN_SRC emacs-lisp
(use-package dash
  :straight t)
#+END_SRC

** Seq
Sequence-manipulation functions that complement basic functions.

#+BEGIN_SRC emacs-lisp
(use-package seq
  :ensure nil)
#+END_SRC

** Prescientn
/*"Simple but effective sorting and filtering for Emacs."*/

#+BEGIN_SRC emacs-lisp
(use-package prescient
  :straight t
  :custom
  (prescient-filter-method '(literal regexp initialism))
  :config
  (prescient-persist-mode t))
#+END_SRC

Here's an interface for it to work with company.

#+BEGIN_SRC emacs-lisp
(use-package company-prescient
  :straight t
  :after company
  :config
  (company-prescient-mode t))
#+END_SRC

...and with Selectrum

#+BEGIN_SRC emacs-lisp :tangle no
(use-package selectrum-prescient
  :straight t
  :after selectrum
  :config
  (selectrum-prescient-mode t))
#+END_SRC

...and with ivy

#+BEGIN_SRC emacs-lisp
(use-package ivy-prescient
  :straight t
  :after ivy
  :config
  (ivy-prescient-mode t))
#+END_SRC
** Cl-lib
Common-lisp extensions for Emacs.

#+BEGIN_SRC emacs-lisp
(use-package cl-lib
  :ensure nil)
#+END_SRC
* Interface & Appearence
** C source code variables
#+BEGIN_SRC emacs-lisp 
(use-package emacs
  :ensure nil
  :init
  (put 'narrow-to-page 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
  :custom
  (use-dialog-box nil "Dialogs via minibuffer only.")
  (tool-bar-mode nil "Disable toolbar.")
  (menu-bar-mode nil "Disable menubar.")
  (scroll-bar-mode nil "Disable scrollbar.")
  (blink-cursor-mode nil "Disable cursor blinking.")
  (scroll-step 1 "Scroll line by line.")
  (scroll-margin 4 "Top and bottom scrolling margin.")
  (inhibit-splash-screen t "Don't show the splash screen.")
  (indicate-empty-lines t "Visually indicate empty lines.")
  (indent-tabs-mode nil "Tabs are evil.")
  (tab-width 4 "Sane default for me.")
  (confirm-kill-processes nil "Don't bother confirming killing processes"))
#+END_SRC
** Simple
#+BEGIN_SRC emacs-lisp
(use-package simple
  :ensure nil
  :config
  (defalias 'yes-or-no-p 'y-or-n-p)
  :custom
  (line-number-mode nil)
  (column-number-mode nil)
  (display-line-numbers-type 'relative)
  (global-display-line-numbers-mode t ))
#+END_SRC
** Themes
#+BEGIN_SRC emacs-lisp  
  (use-package doom-themes
    :straight t
    :config
    (load-theme 'doom-one t))
#+END_SRC

** Fonts & Faces
#+BEGIN_SRC emacs-lisp
(use-package faces
  :ensure nil
  :config
  (set-face-attribute 'default
                      nil
                      :family "Source Code Variable"
                      :weight 'semi-light
                      :width  'semi-condensed
                      :height 145))
#+END_SRC
** Highlight indentation
#+BEGIN_SRC emacs-lisp
(when (display-graphic-p)
  (use-package highlight-indent-guides
    :diminish
    :functions (ivy-cleanup-string
                my-ivy-cleanup-indentation)
    :commands highlight-indent-guides--highlighter-default
    :functions my-indent-guides-for-all-but-first-column
    ;; :hook (prog-mode . highlight-indent-guides-mode)
    :init (setq highlight-indent-guides-method 'character
                highlight-indent-guides-responsive 'top)
    :config
    ;; Don't display indentations while editing with `company'
    (with-eval-after-load 'company
      (add-hook 'company-completion-started-hook
                (lambda (&rest _)
                  "Trun off indentation highlighting."
                  (when highlight-indent-guides-mode
                    (highlight-indent-guides-mode -1))))
      (add-hook 'company-after-completion-hook
                (lambda (&rest _)
                  "Trun on indentation highlighting."
                  (when (and (derived-mode-p 'prog-mode)
                             (not highlight-indent-guides-mode))
                    (highlight-indent-guides-mode 1)))))

    ;; Don't display first level of indentation
    (defun my-indent-guides-for-all-but-first-column (level responsive display)
      (unless (< level 1)
        (highlight-indent-guides--highlighter-default level responsive display)))
    (setq highlight-indent-guides-highlighter-function
          #'my-indent-guides-for-all-but-first-column)
#+END_SRC

Don't display indentation in swiper.

#+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'ivy
      (defun my-ivy-cleanup-indentation (str)
        "Clean up indentation highlighting in ivy minibuffer."
        (let ((pos 0)
              (next 0)
              (limit (length str))
              (prop 'highlight-indent-guides-prop))
          (while (and pos next)
            (setq next (text-property-not-all pos limit prop nil str))
            (when next
              (setq pos (text-property-any next limit prop nil str))
              (ignore-errors
                (remove-text-properties next pos '(display nil face nil) str))))))
      (advice-add #'ivy-cleanup-string :after #'my-ivy-cleanup-indentation))))
#+END_SRC
** Modeline
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :straight t
  :custom
  (doom-modeline-height '50)
  :config
  (doom-modeline-mode t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package diminish
  :straight t
  :config
  (diminish 'flycheck-mode)
  (diminish 'counsel-mode)
  (diminish 'ivy-mode)
  (diminish 'text-scale-mode)
  (diminish 'beacon-mode)
  (diminish 'auto-fill-function)
  (diminish 'which-key-mode))
#+END_SRC
** Icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :if window-system
  :straight t
  :defer t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons-dired
  :if window-system
  :straight t
  :hook
  (dired-mode . all-the-icons-dired-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons-ivy
  :if window-system
  :straight t
  :after ivy
  :custom
  (all-the-icons-ivy-buffer-commands '() "Don't use for buffers.")
  :config
  (unless (file-exists-p "~/.local/share/fonts/all-the-icons.ttf")
    (all-the-icons-install-fonts t)
    (all-the-icons-ivy-setup)))
#+END_SRC
** Beacon
/* "Here your cursor is" */

#+BEGIN_SRC emacs-lisp
(use-package beacon
  :straight t
  :config
  (beacon-mode t))
#+END_SRC
** Dashboard
A cool dashboard to see every time I load muh Emacs.

#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :straight t
  :config
  (dashboard-setup-startup-hook)
  ;; Set the title
  (setq dashboard-banner-logo-title "Welcome to Emacs, thermo-nuclear Man-Machine Interface for Texual data. Happy Hacking.")
  ;; Set the banner
  (setq dashboard-startup-banner 'logo)
  (setq dashboard-center-content t)
  (setq dashboard-items '((recents  . 5)
                        (bookmarks . 5))))
#+END_SRC
** Darkroom
Distraction-free mode.

#+BEGIN_SRC emacs-lisp
(use-package darkroom
  :straight t)
#+END_SRC
** Focus
#+BEGIN_SRC emacs-lisp
(use-package focus
  :straight t)
#+END_SRC 
** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :straight t
  :config
  (global-flycheck-mode t))
#+END_SRC
** Frames
#+BEGIN_SRC emacs-lisp
(use-package frame
  :ensure nil
  :after general
  :general
  ;; Disable suspending
  ("C-z" . nil)
  ("C-z C-z" . nil))
#+END_SRC
** Windows
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :straight t)
#+END_SRC

* Navigation
** Avy
#+BEGIN_SRC emacs-lisp
(use-package avy
  :straight t
  :custom
  (avy-style 'words))
#+END_SRC

* Keyboard & Shortcuts
** General
General.el is a cool interface for making key bindings.

#+BEGIN_SRC emacs-lisp
(use-package general
  :straight t)
#+END_SRC
** Hydra
/* "Make bindings that stick around" */

#+BEGIN_SRC emacs-lisp
(use-package hydra
  :straight t)
#+END_SRC

Hydra integration with use-package.

#+BEGIN_SRC emacs-lisp
(use-package use-package-hydra
  :straight t)
#+END_SRC
** Evil
#+BEGIN_SRC emacs-lisp
(use-package evil
  :straight t
  :preface
  (defun save-and-kill-this-buffer ()
    (interactive)
    (save-buffer)
    (kill-this-buffer))
  :config
  (with-eval-after-load 'evil-maps ; avoid conflict with company tooltip selection
    (define-key evil-insert-state-map (kbd "C-n") nil)
    (define-key evil-insert-state-map (kbd "C-p") nil))
  (evil-ex-define-cmd "q" #'kill-this-buffer)
  (evil-ex-define-cmd "wq" #'save-and-kill-this-buffer)
  (undo-tree-mode nil)
  (evil-mode t))
#+END_SRC

*** Evil collection
#+BEGIN_SRC emacs-lisp
(evil-want-keybinding 'nil)
(use-package evil-collection
  :straight t)
#+END_SRC
** Which key?
A nice little tool to remind you about what keys do you want to press.

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :straight t
  :config
  (which-key-mode t)
  (setq which-key-idle-delay 0.4
        which-key-idle-secondary-delay 0.4))
#+END_SRC

* Search
** Ripgrep
#+BEGIN_SRC emacs-lisp
(use-package rg
  :straight t)
#+END_SRC
** Ag
Ag is a faster grep

#+BEGIN_SRC emacs-lisp
(use-package ag
  :straight t)
#+END_SRC
* Programming
** Languages
*** Lisps
**** Paredit
*Not configured yet*
#+BEGIN_SRC emacs-lisp
(use-package paredit
  :straight t
  :general
  ('paredit-mode-map
  ";" 'nil)
  :hook
  ((scheme-mode lisp-mode clojure-mode emacs-lisp-mode) . paredit-mode))
#+END_SRC
**** Parinfer
*Not configured yet.*

#+BEGIN_SRC emacs-lisp :tangle no
(use-package parinfer
  :straight t
  :general
  ('parinfer-mode-map
  ";" 'nil)
  :hook
  ((scheme-mode lisp-mode clojure-mode emacs-lisp-mode) . parinfer-mode))
#+END_SRC
**** Rainbow-delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :straight t
  :hook
  (prog-mode . rainbow-delimiters-mode))
#+END_SRC
**** Lispy
/Short and sweet lisp editing/
*Not configured yet*

#+BEGIN_SRC emacs-lisp
(use-package lispy
  :straight t)
#+END_SRC
**** Common Lisp
***** Sly
*Not configured yet*
#+BEGIN_SRC emacs-lisp
(use-package sly
  :straight t
  :custom
  (inferior-lisp-program "sbcl"))
#+END_SRC
** Autocompletion
*** Minibuffer completion
**** Ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :straight t
  :general 
  ('ivy-mode-map
  "C-j" 'ivy-previous-line
  "C-l" 'ivy-next-line
  "TAB" 'ivy-partial-or-done)
  :config
  (ivy-mode t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package ivy-rich
  :after counsel
  :straight t
  :config
  (ivy-rich-mode t))
#+END_SRC
**** Counsel
Amx is used by ~Counsel-M-x~.

#+BEGIN_SRC emacs-lisp
(use-package amx
  :straight t 
  :defer t)
#+END_SRC

Counsel itself.

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :straight t
  :bind
  (([remap insert-char] . counsel-unicode-char)
   ([remap isearch-forward] . counsel-grep-or-swiper))
  :init
  (counsel-mode))
#+END_SRC

**** Swiper
#+BEGIN_SRC emacs-lisp
(use-package swiper 
  :straight t)
#+END_SRC
**** Selectrum
I don't use that one anymore.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package selectrum
  :straight t
  :config 
  (selectrum-mode t))
#+END_SRC
*** In-buffer completion
**** Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :straight t
  :config
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 1)
  (setq company-selection-wrap-around t)
  (company-tng-configure-default)
  :hook
  (after-init . global-company-mode))
#+END_SRC
**** Electric pairs
#+BEGIN_SRC emacs-lisp
(use-package elec-pair
  :config
  (electric-pair-mode t))
#+END_SRC
* Help & Manuals
** Helpful
Helpful provides better Emacs "help" buffer

#+BEGIN_SRC emacs-lisp
(use-package helpful
  :straight t)
#+END_SRC
* Term & Shell
** Vterm
#+BEGIN_SRC emacs-lisp :tangle no
(use-package vterm
  :straight t)
#+END_SRC
* Org & Documents
** Org
#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure nil
  :hook
  (org-mode . auto-fill-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package org-pretty-table
  :straight (org-pretty-table :type git :host github :repo "Fuco1/org-pretty-table")
  :hook
  (org-mode . org-pretty-table-mode))
#+END_SRC
** PDF-tools

For viewing Pointless-Document-Format docs in Emacs.

#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :straight t)
#+END_SRC 
* File management
** Dired
Dired is a built-in Emacs file manager.

#+BEGIN_SRC emacs-lisp
(use-package dired
  :ensure nil)
#+END_SRC

Extra dired things

#+BEGIN_SRC emacs-lisp
(use-package dired-x
  :ensure nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package dired-subtree
  :straight t
  :after dired
  :bind
  (:map dired-mode-map
        ("t" . dired-subtree-toggle)))
#+END_SRC

Image preview support for dired.

#+BEGIN_SRC emacs-lisp
(use-package image-dired
  :ensure nil)

(use-package image-dired+
  :straight t
  :after image-dired)
#+END_SRC

Hide dotfiles in dired buffers.

#+BEGIN_SRC emacs-lisp
(use-package dired-hide-dotfiles
  :straight t
  :bind
  (:map dired-mode-map
        ("." . dired-hide-dotfiles-mode))
  :hook
  (dired-mode . dired-hide-dotfiles-mode))
#+END_SRC


Asynchronous dired

#+BEGIN_SRC emacs-lisp
(use-package async
  :straight t
  :defer t
  :init
  (dired-async-mode t))
#+END_SRC

** Set a backup directory
#+BEGIN_SRC emacs-lisp
(use-package files
  :ensure nil
  :custom
  (require-final-newline t)
  (delete-old-versions t)
  (backup-directory-alist
   `((".*" . ,(expand-file-name (concat user-emacs-directory "autosaves/")))))
  (auto-save-file-name-transforms
   `((".*" ,(expand-file-name (concat user-emacs-directory "autosaves/")) t)))
  (insert-default-directory nil))
#+END_SRC
* Version control
** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :straight t
  :config
  ;; Add binding in SPC-commands hydra.
  (defhydra+ hydra-space-commands ()
  ("m" magit)))
#+END_SRC
* Custom
I don't use ~M-x customize~ insterface, so custom-file is set to /dev/null.

#+BEGIN_SRC emacs-lisp
(use-package cus-edit
  :ensure nil
  :custom
  (custom-file "/dev/null"))
#+END_SRC
